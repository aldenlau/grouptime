{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DAYS","DAYS_INDEX","re","getOverlaps","l1","l2","p1","p2","current","intervals","length","push","timeToStr","minutes","day","Math","floor","period","minuteStr","hour","toString","overlappingTimes","allTimes","overlaps","arr","sort","a","b","TimeForm","onSubmitFunc","id","onSubmit","type","name","value","size","GroupTimes","list","className","map","time","Time","timeArr","removeFunc","i","nameToRemove","onClick","e","PersonTime","removeFunction","index","SetGroup","App","useState","Map","times","setTimes","setCurrent","removeTime","newMap","console","log","get","splice","delete","removeLocal","fetch","method","then","res","json","data","Object","entries","removeServer","event","preventDefault","target","elements","idStr","startMinutes","startDay","parseInt","startTimeHour","startPeriod","startTimeMinute","endMinutes","endTimeHour","endPeriod","endTimeMinute","timeName","test","parseFloat","alert","has","set","submitLocal","submitServer","sub","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06b171d1.chunk.js","sourcesContent":["//TODO: Fix new overlapping intervals, remove second day selector\n//If link = default, do locally\n//else do all updates w/ POST and update times using POST response\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\n\nlet DAYS=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\nlet DAYS_INDEX={'sunday':0,'monday':1,'tuesday':2,'wednesday':3,'thursday':4,'friday':5,'saturday':6}\nlet re = /[a-zA-Z]/g;\n\nfunction getOverlaps(l1, l2){\n  /**\n   * Given two sorted arrays of time intervals, return an array of intervals of intersections of the two arrays.\n   */\n  let p1=0;\n  let p2=0;\n  let current=[];\n  let intervals=[];\n  while(p1<l1.length && p2<l2.length){\n      current=[];\n      if(l1[p1][1]<=l2[p2][0]){\n          p1+=1;\n          continue;\n      }\n      if (l2[p2][1]<=l1[p1][0]){\n          p2+=1;\n          continue;\n      }\n      if(l1[p1][0]<l2[p2][0]){\n          current.push(l2[p2][0]);\n      }\n      else{\n          current.push(l1[p1][0]);\n      }\n      if(l1[p1][1]<l2[p2][1]){\n          current.push(l1[p1][1]);\n          p1+=1;\n      }\n      else{\n          current.push(l2[p2][1]);\n          p2+=1;\n      }\n      intervals.push(current)\n  }\n  return intervals;\n}\n\nfunction timeToStr(minutes){\n  /**\n   * Given an amount in minutes elapsed since Sunday midnight, returns a string containing day and time.\n   */\n  let day=Math.floor(minutes/1440);\n  minutes%=1440;\n  let hour=Math.floor(minutes/60);\n  let period;\n  if(hour>=12){\n      period='P.M.';\n  }\n  else{\n      period='A.M.';\n  }\n  hour%=12;\n  if(hour==0){\n      hour=12;\n  }\n  minutes%=60;\n  let minuteStr;\n  if(minutes<10){\n    minuteStr =  '0'+minutes.toString()\n  }\n  else{\n    minuteStr = minutes.toString()\n  }\n  return DAYS[day]+' '+hour.toString()+':'+minuteStr+' '+period;\n}\n\nfunction overlappingTimes(allTimes){\n  /**\n   * Given a Map of times, returns a sorted list containing all overlapping times.\n   */\n  let overlaps = null;\n  for(let arr of allTimes){\n      if(overlaps==null){\n          overlaps=arr[1]\n      }\n      else{\n          overlaps=getOverlaps(overlaps,arr[1])\n      }\n  }\n  if (overlaps!==null){\n    overlaps.sort((a,b) => a);\n  }\n  return overlaps;\n}\n\nfunction TimeForm({onSubmitFunc}) {\n  return (\n    <form id='add-time' onSubmit ={onSubmitFunc}>\n        <label>Name:\n          <input type='text' id='name' name=\"timeName\"/>\n        </label>\n        <label>\n          Day:\n          <select id='start-day' name=\"startDay\">\n              <option value=\"sunday\">Sunday</option>\n              <option value=\"monday\">Monday</option>\n              <option value=\"tuesday\">Tuesday</option>\n              <option value=\"wednesday\">Wednesday</option>\n              <option value=\"thursday\">Thursday</option>\n              <option value=\"friday\">Friday</option>\n              <option value=\"saturday\">Saturday</option>\n            </select>\n        </label>\n        <label>Start time: \n          <input type='text' id='start-time' name=\"startTimeHour\" size=\"2\" />:\n          <input type='text' id='start-time' name=\"startTimeMinute\" size=\"2\"/>\n          <select id='start-period' name=\"startPeriod\">\n            <option value=\"0\">A.M.</option>\n            <option value=\"1\">P.M.</option>\n          </select>\n        </label>\n        <label>End time: \n          <input type='text' id='end-time' name=\"endTimeHour\" size=\"2\" />:\n          <input type='text' id='end-time' name=\"endTimeMinute\" size=\"2\"/>\n          <select id='start-period' name=\"endPeriod\">\n            <option value=\"0\">A.M.</option>\n            <option value=\"1\">P.M.</option>\n          </select>\n        </label>\n        \n        <input type=\"submit\" id = 'add-time-button' value=\"Add\" />\n    </form>\n  )\n}\n\nfunction GroupTimes({list}) {\n  return (\n    <div className='groupTimes'>\n      <h2>Available times</h2>\n      {list ? list.map(time => <p>{timeToStr(time[0])+' - '+timeToStr(time[1])}</p>) : null}\n    </div>\n  )\n}\n\nfunction Time({timeArr, removeFunc, i, nameToRemove}){\n  return  (\n    <div>\n      <p className = \"timeBox\">{timeToStr(timeArr[0])+' - '+timeToStr(timeArr[1])}</p>\n      <button type=\"button\" className = \"timeBox\" onClick = {(e) => removeFunc(i, nameToRemove)}>Remove</button>\n    </div>\n  )\n}\n\nfunction PersonTime({name, list, removeFunction}) {\n  return (\n    <div className=\"personBox\">\n      <p><b>{name}</b></p>\n      {list.map((time,index) => <Time timeArr={time} removeFunc = {removeFunction} i={index} nameToRemove = {name}/>)}\n    </div>\n  )\n}\nfunction SetGroup({onSubmitFunc}){\n  return (\n    <form id='group-id' onSubmit = {onSubmitFunc}>\n      <label>\n        ID\n        <input type='text' id='id-str' name=\"idStr\"/>\n      </label>\n      <input type=\"submit\" id = 'set-group' value=\"Submit\" />\n    </form>\n  )\n}\n\nfunction App() {\n  const [times, setTimes] = useState(new Map());\n  const [overlaps, setOverlaps] = useState([]);\n  const [current, setCurrent] = useState(null);\n  function submitLocal(event){\n    event.preventDefault();\n    let startMinutes = 1440*DAYS_INDEX[event.target.elements.startDay.value]+60*(parseInt(event.target.elements.startTimeHour.value)%12)+60*12*parseInt(event.target.elements.startPeriod.value)+parseInt(event.target.elements.startTimeMinute.value);\n    let endMinutes = 1440*DAYS_INDEX[event.target.elements.startDay.value]+60*(parseInt(event.target.elements.endTimeHour.value)%12)+60*12*parseInt(event.target.elements.endPeriod.value)+parseInt(event.target.elements.endTimeMinute.value);\n    let name = event.target.elements.timeName.value.toString();\n    if(name==''){\n      alert('Name cannot be empty');\n      return\n    }\n    if (parseInt(event.target.elements.startTimeHour.value)<1 || parseInt(event.target.elements.startTimeHour.value)>12 || re.test(event.target.elements.startTimeHour.value) || parseInt(event.target.elements.startTimeHour.value)!=parseFloat(event.target.elements.startTimeHour.value)){\n      alert('Start time hour must be an integer between 1 and 12');\n      return\n    }\n    if (parseInt(event.target.elements.endTimeHour.value)<1 || parseInt(event.target.elements.endTimeHour.value)>12 || re.test(event.target.elements.endTimeHour.value) || parseInt(event.target.elements.endTimeHour.value)!=parseFloat(event.target.elements.endTimeHour.value)){\n      alert('End time hour must be an integer between 1 and 12');\n      return\n    }\n    if (parseInt(event.target.elements.startTimeMinute.value)<0 || parseInt(event.target.elements.startTimeMinute.value)>59 || re.test(event.target.elements.startTimeMinute.value) || parseInt(event.target.elements.startTimeMinute.value)!=parseFloat(event.target.elements.startTimeMinute.value)){\n      alert('Start time minute must be an integer between 0 and 59');\n      return\n    }\n    if (parseInt(event.target.elements.endTimeMinute.value)<0 || parseInt(event.target.elements.endTimeMinute.value)>59 || re.test(event.target.elements.endTimeMinute.value) || parseInt(event.target.elements.endTimeMinute.value)!=parseFloat(event.target.elements.endTimeMinute.value)){\n      alert('End time minute must be an integer between 0 and 59');\n      return\n    }\n    if (startMinutes>=endMinutes){\n      alert('Start time must be later than end time');\n      return\n    }\n\n    event.target.elements.startTimeHour.value='';\n    event.target.elements.startTimeMinute.value='';\n    event.target.elements.endTimeHour.value='';\n    event.target.elements.endTimeMinute.value='';\n    event.target.elements.timeName.value='';\n    \n    let newMap = new Map(times)\n    if(newMap.has(name)){\n      newMap.get(name).push([parseInt(startMinutes),parseInt(endMinutes)]);\n      newMap.get(name).sort((a,b) => a);\n    }\n    else{\n        newMap.set(name,[[parseInt(startMinutes),parseInt(endMinutes)]]);\n    }\n    setTimes(newMap);\n  }\n  function submitServer(event){\n    event.preventDefault();\n    let startMinutes = 1440*DAYS_INDEX[event.target.elements.startDay.value]+60*(parseInt(event.target.elements.startTimeHour.value)%12)+60*12*parseInt(event.target.elements.startPeriod.value)+parseInt(event.target.elements.startTimeMinute.value);\n    let endMinutes = 1440*DAYS_INDEX[event.target.elements.startDay.value]+60*(parseInt(event.target.elements.endTimeHour.value)%12)+60*12*parseInt(event.target.elements.endPeriod.value)+parseInt(event.target.elements.endTimeMinute.value);\n    let name = event.target.elements.timeName.value.toString();\n    if(name==''){\n      alert('Name cannot be empty');\n      return\n    }\n    if (parseInt(event.target.elements.startTimeHour.value)<1 || parseInt(event.target.elements.startTimeHour.value)>12 || re.test(event.target.elements.startTimeHour.value) || parseInt(event.target.elements.startTimeHour.value)!=parseFloat(event.target.elements.startTimeHour.value)){\n      alert('Start time hour must be an integer between 1 and 12');\n      return\n    }\n    if (parseInt(event.target.elements.endTimeHour.value)<1 || parseInt(event.target.elements.endTimeHour.value)>12 || re.test(event.target.elements.endTimeHour.value) || parseInt(event.target.elements.endTimeHour.value)!=parseFloat(event.target.elements.endTimeHour.value)){\n      alert('End time hour must be an integer between 1 and 12');\n      return\n    }\n    if (parseInt(event.target.elements.startTimeMinute.value)<0 || parseInt(event.target.elements.startTimeMinute.value)>59 || re.test(event.target.elements.startTimeMinute.value) || parseInt(event.target.elements.startTimeMinute.value)!=parseFloat(event.target.elements.startTimeMinute.value)){\n      alert('Start time minute must be an integer between 0 and 59');\n      return\n    }\n    if (parseInt(event.target.elements.endTimeMinute.value)<0 || parseInt(event.target.elements.endTimeMinute.value)>59 || re.test(event.target.elements.endTimeMinute.value) || parseInt(event.target.elements.endTimeMinute.value)!=parseFloat(event.target.elements.endTimeMinute.value)){\n      alert('End time minute must be an integer between 0 and 59');\n      return\n    }\n    if (startMinutes>=endMinutes){\n      alert('Start time must be later than end time');\n      return\n    }\n\n    event.target.elements.startTimeHour.value='';\n    event.target.elements.startTimeMinute.value='';\n    event.target.elements.endTimeHour.value='';\n    event.target.elements.endTimeMinute.value='';\n    event.target.elements.timeName.value='';\n    \n    fetch('https://grouptime-api.herokuapp.com/add/'+current+'/'+name+'/'+startMinutes.toString()+'/'+endMinutes.toString()+'/', {\n      method: 'POST'\n    }).then(\n      res => res.json()\n    ).then(data => {\n      setTimes(new Map(Object.entries(data)));\n    })\n\n  }\n\n  function setServer(event){\n    if(event){\n      event.preventDefault();\n      if(event.target.elements.idStr.value==null){\n        return\n      }\n      fetch('https://grouptime-api.herokuapp.com/'+event.target.elements.idStr.value\n      ).then(\n        res => res.json()\n      ).then(data => {\n        setTimes(new Map(Object.entries(data)));\n        setCurrent(event.target.elements.idStr.value);\n      })\n    }\n  }\n  function removeLocal(index, name){\n    let newMap = new Map(times);\n    console.log(newMap.get(name));\n    newMap.get(name).splice(index);\n    if(newMap.get(name).length==0){\n      newMap.delete(name)\n    }\n    setTimes(newMap);\n  }\n  function removeServer(index, name){\n    fetch('https://grouptime-api.herokuapp.com/rm/'+current+'/'+name+'/'+times.get(name)[index][0].toString()+'/'+times.get(name)[index][1].toString()+'/', {\n      method: 'POST'\n    }).then(\n      res => res.json()\n    ).then(data => {\n      setTimes(new Map(Object.entries(data)));\n    })\n\n  }\n  function handleSubmit(event){\n    if(event){\n      if(current==null){\n        submitLocal(event);\n      }\n      else{\n        submitServer(event);\n      }\n    }\n  }\n  function removeTime(index, name){\n    if(current==null){\n      removeLocal(index, name);\n    }\n    else{\n      removeServer(index, name);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <SetGroup onSubmitFunc={setServer} />\n      <TimeForm onSubmitFunc={handleSubmit}/>\n      <GroupTimes list={overlappingTimes(times)}/>\n      {[...times].map(sub => <PersonTime name={sub[0]} list={sub[1]} removeFunction = {removeTime}/>)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}