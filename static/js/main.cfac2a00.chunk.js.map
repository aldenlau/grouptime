{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DAYS","DAYS_INDEX","getOverlaps","l1","l2","p1","p2","current","intervals","length","push","timeToStr","minutes","day","Math","floor","period","minuteStr","hour","toString","overlappingTimes","allTimes","overlaps","arr","sort","a","b","TimeForm","onSubmitFunc","useState","id","onSubmit","type","name","value","size","GroupTimes","list","className","map","time","PersonTime","App","Map","times","setTimes","event","preventDefault","startMinutes","target","elements","startDay","parseInt","startTimeHour","startPeriod","startTimeMinute","endMinutes","endDay","endTimeHour","endPeriod","endTimeMinute","timeName","alert","elem","newMap","has","get","set","console","log","sub","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfac2a00.chunk.js","sourcesContent":["//TODO: Fix new overlapping intervals\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nlet DAYS=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\nlet DAYS_INDEX={'sunday':0,'monday':1,'tuesday':2,'wednesday':3,'thursday':4,'friday':5,'saturday':6}\nfunction getOverlaps(l1, l2){\n  /**\n   * Given two sorted arrays of time intervals, return an array of intervals of intersections of the two arrays.\n   */\n  let p1=0;\n  let p2=0;\n  let current=[];\n  let intervals=[];\n  while(p1<l1.length && p2<l2.length){\n      current=[];\n      if(l1[p1][1]<=l2[p2][0]){\n          p1+=1;\n          continue;\n      }\n      if (l2[p2][1]<=l1[p1][0]){\n          p2+=1;\n          continue;\n      }\n      if(l1[p1][0]<l2[p2][0]){\n          current.push(l2[p2][0]);\n      }\n      else{\n          current.push(l1[p1][0]);\n      }\n      if(l1[p1][1]<l2[p2][1]){\n          current.push(l1[p1][1]);\n          p1+=1;\n      }\n      else{\n          current.push(l2[p2][1]);\n          p2+=1;\n      }\n      intervals.push(current)\n  }\n  return intervals;\n}\n\nfunction timeToStr(minutes){\n  /**\n   * Given an amount in minutes elapsed since Sunday midnight, returns a string containing day and time.\n   */\n  let day=Math.floor(minutes/1440);\n  minutes%=1440;\n  let hour=Math.floor(minutes/60);\n  let period;\n  if(hour>=12){\n      period='P.M.';\n  }\n  else{\n      period='A.M.';\n  }\n  hour%=12;\n  if(hour==0){\n      hour=12;\n  }\n  minutes%=60;\n  let minuteStr;\n  if(minutes<10){\n    minuteStr =  '0'+minutes.toString()\n  }\n  else{\n    minuteStr = minutes.toString()\n  }\n  return DAYS[day]+' '+hour.toString()+':'+minuteStr+' '+period;\n}\n\nfunction overlappingTimes(allTimes){\n  /**\n   * Given a Map of times, returns a sorted list containing all overlapping times.\n   */\n  let overlaps = null;\n  for(let arr of allTimes){\n      if(overlaps==null){\n          overlaps=arr[1]\n      }\n      else{\n          overlaps=getOverlaps(overlaps,arr[1])\n      }\n  }\n  if (overlaps!==null){\n    overlaps.sort((a,b) => a);\n  }\n  return overlaps;\n}\n\nfunction TimeForm({onSubmitFunc}) {\n  const [handleSubmit, setHandleSubit] = useState(onSubmitFunc)\n  return (\n    <form id='add-time' onSubmit ={onSubmitFunc}>\n        <label>Name:\n          <input type='text' id='name' name=\"timeName\"/>\n        </label>\n\n        <label>Start time: \n          <select id='start-day' name=\"startDay\">\n            <option value=\"sunday\">Sunday</option>\n            <option value=\"monday\">Monday</option>\n            <option value=\"tuesday\">Tuesday</option>\n            <option value=\"wednesday\">Wednesday</option>\n            <option value=\"thursday\">Thursday</option>\n            <option value=\"friday\">Friday</option>\n            <option value=\"saturday\">Saturday</option>\n          </select>\n          <input type='text' id='start-time' name=\"startTimeHour\" size=\"2\" />:\n          <input type='text' id='start-time' name=\"startTimeMinute\" size=\"2\"/>\n          <select id='start-period' name=\"startPeriod\">\n            <option value=\"0\">A.M.</option>\n            <option value=\"1\">P.M.</option>\n          </select>\n        </label>\n        <label>End time: \n          <select id='end-day' name=\"endDay\">\n            <option value=\"sunday\">Sunday</option>\n            <option value=\"monday\">Monday</option>\n            <option value=\"tuesday\">Tuesday</option>\n            <option value=\"wednesday\">Wednesday</option>\n            <option value=\"thursday\">Thursday</option>\n            <option value=\"friday\">Friday</option>\n            <option value=\"saturday\">Saturday</option>\n          </select>\n          <input type='text' id='end-time' name=\"endTimeHour\" size=\"2\" />:\n          <input type='text' id='end-time' name=\"endTimeMinute\" size=\"2\"/>\n          <select id='start-period' name=\"endPeriod\">\n            <option value=\"0\">A.M.</option>\n            <option value=\"1\">P.M.</option>\n          </select>\n        </label>\n        \n        <input type=\"submit\" id = 'add-time-button' value=\"Add\" />\n    </form>\n  )\n}\n\nfunction GroupTimes({list}) {\n  return (\n    <div className='groupTimes'>\n      <h2>Available times</h2>\n      {list ? list.map(time => <p>{timeToStr(time[0])+' - '+timeToStr(time[1])}</p>) : null}\n    </div>\n  )\n}\n\nfunction PersonTime({name, list}) {\n  return (\n    <div className=\"personBox\">\n      <p><b>{name}</b></p>\n      {list.map(time => <p>{timeToStr(time[0])+' - '+timeToStr(time[1])}</p>)}\n    </div>\n  )\n}\n\n\nfunction App() {\n  const [times, setTimes] = useState(new Map())\n  const [overlaps, setOverlaps] = useState([])\n  function handleSubmit(event){\n    if(event){\n      event.preventDefault();\n      let startMinutes = 1440*DAYS_INDEX[event.target.elements.startDay.value]+60*(parseInt(event.target.elements.startTimeHour.value)%12)+60*12*parseInt(event.target.elements.startPeriod.value)+parseInt(event.target.elements.startTimeMinute.value);\n      let endMinutes = 1440*DAYS_INDEX[event.target.elements.endDay.value]+60*(parseInt(event.target.elements.endTimeHour.value)%12)+60*12*parseInt(event.target.elements.endPeriod.value)+parseInt(event.target.elements.endTimeMinute.value);\n      let name = event.target.elements.timeName.value.toString();\n      if(name==''){\n        alert('Name cannot be empty');\n        return\n      }\n      if (event.target.elements.startTimeHour.value<1 || event.target.elements.startTimeHour.value>12){\n        alert('Start time hour must be between 1 and 12');\n        return\n      }\n      if (event.target.elements.endTimeHour.value<1 || event.target.elements.endTimeHour.value>12){\n        alert('End time hour must be between 1 and 12');\n        return\n      }\n      if (event.target.elem)\n      if (startMinutes>=endMinutes){\n        alert('Start time must be later than end time');\n        return\n      }\n\n      event.target.elements.startTimeHour.value='';\n      event.target.elements.startTimeMinute.value='';\n      event.target.elements.endTimeHour.value='';\n      event.target.elements.endTimeMinute.value='';\n      event.target.elements.timeName.value='';\n      \n      let newMap = new Map(times)\n      if(newMap.has(name)){\n        newMap.get(name).push([parseInt(startMinutes),parseInt(endMinutes)]);\n        newMap.get(name).sort((a,b) => a);\n      }\n      else{\n          newMap.set(name,[[parseInt(startMinutes),parseInt(endMinutes)]]);\n      }\n      setTimes(newMap);\n      console.log(times)\n      console.log(overlaps)\n    }\n  }\n  return (\n    <div className=\"App\">\n      <TimeForm onSubmitFunc={handleSubmit}/>\n      <GroupTimes list={overlappingTimes(times)}/>\n      {[...times].map(sub => <PersonTime name={sub[0]} list={sub[1]}/>)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}